{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","App","react_default","a","createElement","App_MyProvider","App_Family","Component","MyProvider","state","name","random","age","cool","_this2","this","Provider","value","growAYearOlder","setState","props","children","Family","className","Consumer","App_Person","Person","_ref","Fragment","App_NameDisplay","App_ButtonPress","NameDisplay","_ref2","userName","ButtonPress","_ref3","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAKMA,EAAYC,IAAMC,gBAIlBC,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACE,EAAD,eANQC,aAgBZC,6MACJC,MAAQ,CACNC,KAAMC,MACNC,IAAK,IACLC,MAAM,2EAEC,IAAAC,EAAAC,KACP,OACEb,EAAAC,EAAAC,cAACN,EAAUkB,SAAX,CACEC,MAAO,CACLR,MAAOM,KAAKN,MACZS,eAAgB,kBACdJ,EAAKK,SAAS,CACZP,IAAKE,EAAKL,MAAMG,IAAM,EACtBF,KAAMC,WAIXI,KAAKK,MAAMC,iBAlBKd,aA2BnBe,EAAS,SAAAF,GAAK,OAClBlB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACbrB,EAAAC,EAAAC,cAACN,EAAU0B,SAAX,KACG,SAAAP,GAAK,OAAIf,EAAAC,EAAAC,cAAA,UAAKa,EAAMR,MAAMG,OAE7BV,EAAAC,EAAAC,cAACqB,EAAD,QAOEC,mLAEF,OACExB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACbrB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACN,EAAU0B,SAAX,KACG,SAAAG,GAAA,IAAYf,EAAZe,EAAGlB,MAASG,IAAZ,OACCV,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAAA,iBAASQ,GACTV,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,iBAVOvB,aAsBfwB,EAAc,kBAClB7B,EAAAC,EAAAC,cAACN,EAAU0B,SAAX,KACG,SAAAQ,GAAA,IAAkBC,EAAlBD,EAAGvB,MAASC,KAAZ,OACCR,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,aAAb,SAAgCU,MAOhCC,EAAc,kBAClBhC,EAAAC,EAAAC,cAACN,EAAU0B,SAAX,KACG,SAAAW,GAAA,IAAGjB,EAAHiB,EAAGjB,eAAH,OAAwBhB,EAAAC,EAAAC,cAAA,UAAQgC,QAASlB,GAAjB,2CAIdjB,IC1FKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d88972d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport random from 'random-name';\n\n// first we will make a new context\nconst MyContext = React.createContext();\n\n// App class is exported to index.js and holds all other classes inside it\n//\nclass App extends Component {\n  render() {\n    return (\n      <MyProvider>\n        <div>\n          <p>I am the app</p>\n          <Family />\n        </div>\n      </MyProvider>\n    );\n  }\n}\n\n// MyProvider class called by App class and creates the Context for the app; all the children will be contained in MyProvider\n// MyProvide provides context to children component via the value props\n// Values provided to the children components as Context include the state as well as the growAYearOlder function\nclass MyProvider extends Component {\n  state = {\n    name: random(),\n    age: 100,\n    cool: true\n  };\n  render() {\n    return (\n      <MyContext.Provider\n        value={{\n          state: this.state,\n          growAYearOlder: () =>\n            this.setState({\n              age: this.state.age + 1,\n              name: random()\n            })\n        }}\n      >\n        {this.props.children}\n      </MyContext.Provider>\n    );\n  }\n}\n\n// Family component is used by App alongside MyProvider and is rendered as a child of MyProvider\n// This Family component is one consumer of the context created in MyProvider; namely, this consumes the age value from the state passed as Context\n// The component is consumer here only to show the React Context can be consumer by multiple children; later on, Person component also consumes the same context value\nconst Family = props => (\n  <div className=\"family\">\n    <MyContext.Consumer>\n      {value => <h1>{value.state.age}</h1>}\n    </MyContext.Consumer>\n    <Person />\n  </div>\n);\n\n// Person is rendered as child of the Family component\n// This consumes the age value inside the context value props\n// To do so, it first destructures the value props extracting the age value from the state passed to context value props\nclass Person extends Component {\n  render() {\n    return (\n      <div className=\"person\">\n        <h1>Hermano!</h1>\n        <MyContext.Consumer>\n          {({ state: { age } }) => (\n            <React.Fragment>\n              <p>Age: {age}</p>\n              <NameDisplay />\n              <ButtonPress />\n            </React.Fragment>\n          )}\n        </MyContext.Consumer>\n      </div>\n    );\n  }\n}\n\n// Name Display is child of the Person component\n// This consumes the name value from the context\n// The overall value passed to the Context is destructred here; name is extracted from the value props as username\nconst NameDisplay = () => (\n  <MyContext.Consumer>\n    {({ state: { name: userName } }) => (\n      <p className=\"paragraph\">Name: {userName}</p>\n    )}\n  </MyContext.Consumer>\n);\n\n// ButtonPress is also a child of the Person component\n// This component consumes the growAYearOlder passed as Context in the value props\nconst ButtonPress = () => (\n  <MyContext.Consumer>\n    {({ growAYearOlder }) => <button onClick={growAYearOlder}>üç∞üç•üéÇ</button>}\n  </MyContext.Consumer>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}